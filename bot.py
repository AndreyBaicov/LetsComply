import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters, CommandHandler

from whisper_service import transcribe_audio
from gpt_service import translate_to_official_speech


load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
app = ApplicationBuilder().token(TOKEN).build()



async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø —Ç—É—Ç –ø–æ–¥–±–∏—Ä–∞—é —Å–ª–æ–≤–∞. –ù–∞–ø–∏—à–∏ –º–Ω–µ –∏–ª–∏ —Å–∫–∞–∂–∏ –∫–∞–∫ –µ—Å—Ç—å, –∞ —è –ø–µ—Ä–µ–≤–µ–¥—É —ç—Ç–æ –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —è–∑—ã–∫"
    )

app.add_handler(CommandHandler("start", handle_start))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üí¨ Message received")
    try:
        if update.message.voice:
            voice = await update.message.voice.get_file()
            file_path = await voice.download_as_bytearray()
            input_text = transcribe_audio(file_path)
        else:
            input_text = update.message.text

        reply = await translate_to_official_speech(input_text)
        print(f"üìù Text input: {input_text}")
        await update.message.reply_text(reply)

    except Exception:
        await update.message.reply_text("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

app.add_handler(MessageHandler(filters.TEXT | filters.VOICE, handle_message))

if __name__ == "__main__":
    print("Working...")
    app.run_polling()